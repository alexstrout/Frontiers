Code "Allow Homing Attack" in "Gameplay/Skills/Tails" by "fox, Susero, Hyper" does
/*
Allows Tails to Homing Attack locked targets.

Toggle Spanner Throw with L3 (Light Dash) button.
*/

#include "Reflection" noemit
#lib "HMM"

const string FX_HANDLE = "TailsHomingSwapFx";

static HashSet<Tails.StateID> HomingStates = new()
{
    Tails.StateID.StateHomingAttack,
    Tails.StateID.StateHomingAttackInStorm,
    Tails.StateID.StateHomingRepelled
};

static bool InitConfig = true;
static bool CfgAllowToggle = true;
static bool CfgAllowEnemies = true;
static bool CfgSpannerReminder = true;

static bool HomingActive = true;
static float FxTime = 0f;
static int FxCount = 0;
static System.Random RNG = new();

static float HomingTime;
static Tails.StateID PrevState;
static GameObject.Data* PrevLockOnTarget;

{
    if (Player.GetPlayerType() != Player.PlayerType.Tails)
        return;

    if (InitConfig)
    {
        InitConfig = false;

        //Avoid crashing the game if config is missing or malformed
        try {
            var modsQuery = HMM.FindModsByName("Tails Smart Homing Attack");
            if (modsQuery.Count == 1)
            {
                string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
                var ini = INI.Read(modConfigIniPath);

                CfgAllowToggle = INI.Parse<bool>(ini["ModSettings"]["ModeToggleOnL3"], CfgAllowEnemies);
                CfgAllowEnemies = INI.Parse<bool>(ini["ModSettings"]["HomingAttackEnemies"], CfgAllowEnemies);
                CfgSpannerReminder = INI.Parse<bool>(ini["ModSettings"]["SpannerLockOnSound"], CfgSpannerReminder);
            }
        }
        catch (Exception e) {
            Logger.Error("TailsSmartHoming: Error reading config, try configuring the mod in HMM! Details:");
            Logger.Error(e);
        }
    }

    if (CfgAllowToggle && Player.Input.IsPressed(Player.InputActionType.PlayerLightDash))
    {
        HomingActive = !HomingActive;
        FxTime = 0.4f;

        for (; FxCount > 0; FxCount--)
            Player.Effect.StopEffect(FX_HANDLE);

        if (HomingActive)
        {
            Player.Sound.PlaySound("sn_short_homing");
            Player.Effect.PlayEffect(FX_HANDLE, "ef_tap_spinatk01_end01");
        }
        else
        {
            Player.Sound.PlaySound("ta_spanner_hit");
            if (RNG.Next(100) < 50)
                Player.Effect.PlayEffect(FX_HANDLE, "ef_tap_spanner_throw_end01");
            else
                Player.Effect.PlayEffect(FX_HANDLE, "ef_tap_spanner_throw_end02");
        }
        FxCount = 1;
    }

    if (FxTime > 0f)
    {
        FxTime -= Time.GetDeltaTime();
        if (FxTime <= 0f)
            for (; FxCount > 0; FxCount--)
                Player.Effect.StopEffect(FX_HANDLE);
    }

    var CurState = Player.State.GetCurrentStateID<Tails.StateID>();
    if (CurState == Tails.StateID.StateHomingFinished && CurState != PrevState)
    {
        //Use Sonic parameters as Tails by default has no Cyberspace definition
        //Players probably reasonably expect homing behavior to match Sonic's anyhow
        var ParamInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common")
        if (ParamInfo != null && ParamInfo.pData != null)
            HomingTime = RFL_GET_CONTEXTUAL_PLAYER_PARAM(ParamInfo, modePackage.homingAttack.sonicBounce.attackDownTime) + 0.2f;
    }
    PrevState = CurState;

    if (HomingTime > 0f)
    {
        HomingTime -= Time.GetDeltaTime();
        if (HomingTime < 0f)
            HomingTime = 0f;
    }

    var LockOnTarget = Player.Status.GetLockOnTarget();
    if (LockOnTarget == null)
    {
        PrevLockOnTarget = null;
        return;
    }

    if (CfgSpannerReminder && LockOnTarget != PrevLockOnTarget && !HomingActive)
        Player.Sound.PlaySound("ta_spanner_hit");
    PrevLockOnTarget = LockOnTarget;

    if (HomingActive && HomingTime == 0f
    && Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
    && (CfgAllowEnemies || GameObject.GetGOC(LockOnTarget, "GOCHealth") == null)
    && !(IS_WORLD_FLAG(IsDamagedOrRepelled) || HomingStates.Contains(CurState)))
        Player.State.SetState<Tails.StateID>(Tails.StateID.StateHomingAttack);
}
